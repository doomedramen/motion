{"version":3,"sources":["eyes.js"],"names":["Eyes","self","height","width","container","$","Resolution","eye1","Two","appendTo","eye2","fixedEyeColor","getRandomColor","eyes","makeEye","domElement","renderer","releaseEyes","_","debounce","each","eye","parts","ball","destination","clear","$window","window","bind","mousemove","e","touch","originalEvent","changedTouches","pageX","pageY","mouse","Vector","clientX","clientY","rect","getBoundingClientRect","center","left","top","theta","Math","atan2","y","x","radius","distanceTo","set","cos","sin","two","color","background","makeRectangle","noStroke","name","eyeMask","makeGroup","retina","makeCircle","fill","pupil","linewidth","reflection","lid","makeEllipse","stroke","noFill","add","translation","mask","play","floor","random","func","map","_doToBothEyes","_doToLidAndMask","part","Tween","get","to","startHeight","curved","log","color1","color2"],"mappings":";AAmOA,IAAA,EAAA,WAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,OAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAnOMA,IAAAA,EAAAA,WAEY,SAAA,IAAA,EAAA,KAAA,GAEJC,IAAAA,EAAO,KAERC,KAAAA,OAAS,IACTC,KAAAA,MAAQ,IAEPC,IAAAA,EAAYC,EAAE,YAAY,GAE5BC,IAAAA,WAAa,GAEXC,IAAAA,EAAO,IAAIC,KACN,MAAA,KAAKL,MACJ,OAAA,KAAKD,SACdO,SAASL,GACNM,EAAO,IAAIF,KACN,MAAA,KAAKL,MACJ,OAAA,KAAKD,SACdO,SAASL,GAONO,EAAgBV,EAAKW,iBACtBC,EAAAA,MACDC,EAAQP,EAAMI,GACdG,EAAQJ,EAAMC,IAGbE,EAAAA,KAAK,GAAGE,WAAaR,EAAKS,SAASD,WACnCF,EAAAA,KAAK,GAAGE,WAAaL,EAAKM,SAASD,WAElCE,IAAAA,EAAcC,EAAEC,SAAS,WACzBC,EAAAA,KAAKnB,EAAKY,KAAM,SAAUQ,GACpBC,EAAAA,MAAMC,KAAKC,YAAYC,WAEhC,KAEGC,EAAUrB,EAAEsB,QACbC,KAAK,YAAaC,GAClBD,KAAK,YAAa,SAAUE,GACnBC,IAAAA,EAAQD,EAAEE,cAAcC,eAAe,GAKtC,OAJG,GACGF,QAAAA,EAAMG,MACNH,QAAAA,EAAMI,SAEZ,IAcNN,SAAAA,EAAUC,GAETM,IAAAA,EAAQ,IAAI5B,IAAI6B,OAAOP,EAAEQ,QAASR,EAAES,SACxCnB,EAAAA,KAAKnB,EAAKY,KAAM,SAAUQ,GAClBmB,IAAAA,EAAOnB,EAAIN,WAAW0B,wBACtBC,GACCF,EAAAA,EAAKG,KAAOH,EAAKrC,MAAQ,EACzBqC,EAAAA,EAAKI,IAAMJ,EAAKtC,OAAS,GAE1B2C,EAAQC,KAAKC,MAAMX,EAAMY,EAAIN,EAAOM,EAAGZ,EAAMa,EAAIP,EAAOO,GAGxDC,EAAS,IAFEd,EAAMe,WAAWT,GACXhB,EAAQvB,SAE3BmB,EAAAA,MAAMC,KAAKC,YAAY4B,IAAIF,EAASJ,KAAKO,IAAIR,GAAQK,EAASJ,KAAKQ,IAAIT,MAG/E5B,IAIKH,SAAAA,EAAQyC,EAAKC,GAEZvD,IAEFwD,EAAaF,EAAIG,cAAcH,EAAIpD,MAAQ,EAAGoD,EAAIrD,OAAS,EAAGqD,EAAIpD,MAAOoD,EAAIrD,QACtEyD,EAAAA,WAEAC,EAAAA,KAAO,aAEdC,IAAAA,EAAUN,EAAIO,UAAUL,GAEtBlC,EAAOgC,EAAIO,YACXzC,EAAMkC,EAAIO,YAGVC,EAASR,EAAIS,WAAW,EAAG,EAAGT,EAAIrD,OAAS,GAC1C+D,EAAAA,KAAOT,GAdD,KAce5C,iBACrB+C,EAAAA,WAEDO,IAAAA,EAAQX,EAAIS,WAAW,EAAG,EAAGT,EAAIrD,OAAS,GAC1C+D,EAAAA,KAAO,OACPE,EAAAA,UAAY,GACZR,EAAAA,WACAS,IAAAA,EAAab,EAAIS,WAAWT,EAAIrD,OAAS,IAAKqD,EAAIrD,OAAS,GAAIqD,EAAIrD,OAAS,IACvE+D,EAAAA,KAAO,2BACPN,EAAAA,WAEPU,IAAAA,EAAMd,EAAIe,YAAY,EAAG,EAAGf,EAAIrD,OAAS,EAAGqD,EAAIrD,OAAS,GACzDqE,EAAAA,OAAS,OACTJ,EAAAA,UAAY,GACZK,EAAAA,SAGCC,EAAAA,IAAIV,EAAQG,EAAOE,GACnB5C,EAAAA,YAAc,IAAIhB,IAAI6B,OAEvBoC,EAAAA,IAAIlD,EAAM8C,GACVK,EAAAA,YAAYtB,IAAIG,EAAIpD,MAAQ,EAAGoD,EAAIrD,OAAS,GAG1CyE,IAAAA,EAAOpB,EAAIe,YAAYf,EAAIpD,MAAQ,EAAGoD,EAAIrD,OAAS,EAAGqD,EAAIrD,OAAS,EAAGqD,EAAIrD,OAAS,GAYlFmB,OAXHC,EAAAA,OAAQ,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAKRyC,OAAAA,GAGIU,EAAAA,IAAIpD,GAEJsD,EAAAA,KAAOA,EACRtD,EAnFNO,EAAAA,KAAK,SAAU,WACVP,IAAAA,EAAMpB,EAAKY,KAAK,GAClBS,EAAAA,MAAMC,KAAKmD,YAAYzB,GAAqE,OAA/D5B,EAAIC,MAAMC,KAAKC,YAAYyB,EAAI5B,EAAIC,MAAMC,KAAKmD,YAAYzB,GACvF3B,EAAAA,MAAMC,KAAKmD,YAAY1B,GAAqE,OAA/D3B,EAAIC,MAAMC,KAAKC,YAAYwB,EAAI3B,EAAIC,MAAMC,KAAKmD,YAAY1B,KAC5F4B,OACEhD,EAAAA,KAAK,SAAU,WACVP,IAAAA,EAAMpB,EAAKY,KAAK,GAClBS,EAAAA,MAAMC,KAAKmD,YAAYzB,GAAqE,OAA/D5B,EAAIC,MAAMC,KAAKC,YAAYyB,EAAI5B,EAAIC,MAAMC,KAAKmD,YAAYzB,GACvF3B,EAAAA,MAAMC,KAAKmD,YAAY1B,GAAqE,OAA/D3B,EAAIC,MAAMC,KAAKC,YAAYwB,EAAI3B,EAAIC,MAAMC,KAAKmD,YAAY1B,KAC5F4B,OAqKX,OAAA,EAAA,IAAA,IAAA,iBAtFqB,MAAA,WACN,MAAA,QACD9B,KAAK+B,MAAsB,IAAhB/B,KAAKgC,UAAkB,IAClChC,KAAK+B,MAAsB,IAAhB/B,KAAKgC,UAAkB,IAClChC,KAAK+B,MAAsB,IAAhB/B,KAAKgC,UAAkB,YAkFhD,IAAA,gBA7EkBC,MAAAA,SAAAA,GACLlE,KAAAA,KAAKmE,IAAI,SAAO,GACZ3D,EAAAA,QA2EjB,IAAA,kBAvEoBA,MAAAA,SAAAA,EAAK0D,GACZ1D,EAAAA,EAAIC,MAAMqD,MACVtD,EAAAA,EAAIC,MAAM+C,QAqEvB,IAAA,QAlEY,MAAA,WAAA,IAAA,EAAA,KAEEpE,EAAO,KACRgF,KAAAA,cAAc,SAAO,GAEjBC,EAAAA,gBAAgB7D,EAAK,SAAU8D,GACvBC,SAAAA,MAAMC,IAAIF,GACdG,IAAIpF,OAAQD,EAAKC,OAAS,GANzB,YAiEtB,IAAA,SAtDa,MAAA,WAAA,IAAA,EAAA,KAIA+E,KAAAA,cAAc,SAAO,GACjBC,EAAAA,gBAAgB7D,EAAK,SAAU8D,GACvBC,SAAAA,MAAMC,IAAIF,GACdG,IAAIpF,OANI,KACP,YAoDtB,IAAA,QAzCY,MAAA,WAAA,IAAA,EAAA,KAIC+E,KAAAA,cAAc,SAAO,GAChBM,IAAAA,EAAclE,EAAIC,MAAM+C,IAAInE,OAC7BgF,EAAAA,gBAAgB7D,EAAK,SAAU8D,GACvBC,SAAAA,MAAMC,IAAIF,GACdG,IAAIpF,OAPI,IACP,KAODoF,IAAIpF,OAAQqF,GAPX,YAuCtB,IAAA,SA1Ba,MAAA,WAAA,IAAA,EAAA,KACAN,KAAAA,cAAc,SAAO,GAEjBC,EAAAA,gBAAgB7D,EAAK,SAAU8D,GAE3BjF,EAAAA,OAAS,GACTsF,EAAAA,QAAS,EACNC,QAAAA,IAAIN,UAmB5B,IAAA,eATiBO,MAAAA,SAAAA,EAAQC,GAGZ9E,KAAAA,KAAK,GAAGS,MAAMyC,OAAOE,KAAOyB,EAC5B7E,KAAAA,KAAK,GAAGS,MAAMyC,OAAOE,KAAO0B,GAAUD,MAKnD,EAnOM1F,GAmON2B,OAAO3B,KAAOA","file":"eyes.34f7da5b.map","sourceRoot":"..","sourcesContent":["class Eyes {\n\n    constructor() {\n\n        const self = this;\n\n        this.height = 400;\n        this.width = 400;\n\n        const container = $('#content')[0];\n\n        Two.Resolution = 24;\n\n        const eye1 = new Two({\n            width: this.width,\n            height: this.height\n        }).appendTo(container);\n        const eye2 = new Two({\n            width: this.width,\n            height: this.height,\n        }).appendTo(container);\n\n        // const test = new Two({\n        //     width: 400,\n        //     height: 400,\n        // }).appendTo(container);\n\n        const fixedEyeColor = self.getRandomColor();\n        self.eyes = [\n            makeEye(eye1, fixedEyeColor),\n            makeEye(eye2, fixedEyeColor),\n        ];\n\n        self.eyes[0].domElement = eye1.renderer.domElement;\n        self.eyes[1].domElement = eye2.renderer.domElement;\n\n        const releaseEyes = _.debounce(function () {\n            _.each(self.eyes, function (eye) {\n                eye.parts.ball.destination.clear();\n            });\n        }, 1000);\n\n        const $window = $(window)\n            .bind('mousemove', mousemove)\n            .bind('touchmove', function (e) {\n                const touch = e.originalEvent.changedTouches[0];\n                mousemove({\n                    clientX: touch.pageX,\n                    clientY: touch.pageY\n                });\n                return false;\n            });\n\n        eye1.bind('update', function () {\n            const eye = self.eyes[0];\n            eye.parts.ball.translation.x += (eye.parts.ball.destination.x - eye.parts.ball.translation.x) * 0.0625;\n            eye.parts.ball.translation.y += (eye.parts.ball.destination.y - eye.parts.ball.translation.y) * 0.0625;\n        }).play();\n        eye2.bind('update', function () {\n            const eye = self.eyes[1];\n            eye.parts.ball.translation.x += (eye.parts.ball.destination.x - eye.parts.ball.translation.x) * 0.0625;\n            eye.parts.ball.translation.y += (eye.parts.ball.destination.y - eye.parts.ball.translation.y) * 0.0625;\n        }).play();\n\n        function mousemove(e) {\n\n            const mouse = new Two.Vector(e.clientX, e.clientY);\n            _.each(self.eyes, function (eye) {\n                const rect = eye.domElement.getBoundingClientRect();\n                const center = {\n                    x: rect.left + rect.width / 2,\n                    y: rect.top + rect.height / 2\n                };\n                const theta = Math.atan2(mouse.y - center.y, mouse.x - center.x);\n                const distance = mouse.distanceTo(center);\n                const pct = distance / $window.width();\n                const radius = 75 * pct;\n                eye.parts.ball.destination.set(radius * Math.cos(theta), radius * Math.sin(theta));\n            });\n\n            releaseEyes();\n\n        }\n\n        function makeEye(two, color) {\n\n            const self = this;\n\n            var background = two.makeRectangle(two.width / 2, two.height / 2, two.width, two.height);\n            background.noStroke();\n            // background.fill = 'rgb(255, 255, 175)';\n            background.name = 'background';\n\n            var eyeMask = two.makeGroup(background);\n\n            const ball = two.makeGroup();\n            const eye = two.makeGroup();\n\n\n            const retina = two.makeCircle(0, 0, two.height / 4);\n            retina.fill = color || self.getRandomColor();\n            retina.noStroke();\n\n            const pupil = two.makeCircle(0, 0, two.height / 6);\n            pupil.fill = '#333';\n            pupil.linewidth = 10;\n            pupil.noStroke();\n            const reflection = two.makeCircle(two.height / 12, -two.height / 12, two.height / 12);\n            reflection.fill = 'rgba(255, 255, 255, 0.9)';\n            reflection.noStroke();\n\n            let lid = two.makeEllipse(0, 0, two.height / 3, two.height / 4);\n            lid.stroke = '#333';\n            lid.linewidth = 15;\n            lid.noFill();\n\n\n            ball.add(retina, pupil, reflection);\n            ball.destination = new Two.Vector();\n\n            eye.add(ball, lid);\n            eye.translation.set(two.width / 2, two.height / 2);\n\n\n            const mask = two.makeEllipse(two.width / 2, two.height / 2, two.height / 3, two.height / 4)\n            eye.parts = {\n                mask,\n                ball,\n                lid,\n                pupil,\n                retina\n            };\n\n            eyeMask.add(eye);\n\n            eyeMask.mask = mask;\n            return eye;\n\n        }\n    }\n\n    getRandomColor() {\n        return 'rgba('\n            + Math.floor(Math.random() * 255) + ','\n            + Math.floor(Math.random() * 255) + ','\n            + Math.floor(Math.random() * 255) + ','\n            + 0.66 + ')';\n    }\n\n\n    _doToBothEyes(func) {\n        this.eyes.map(eye => {\n            func(eye);\n        })\n    }\n\n    _doToLidAndMask(eye, func) {\n        func(eye.parts.mask);\n        func(eye.parts.lid);\n    }\n\n    reset() {\n        const speed = 200;\n        const self = this;\n        this._doToBothEyes(eye => {\n\n            this._doToLidAndMask(eye, function (part) {\n                createjs.Tween.get(part)\n                    .to({height: self.height / 2}, speed);\n            })\n        })\n    }\n\n    squint() {\n        const squintHeight = 100;\n        const speed = 200;\n\n        this._doToBothEyes(eye => {\n            this._doToLidAndMask(eye, function (part) {\n                createjs.Tween.get(part)\n                    .to({height: squintHeight}, speed);\n            });\n        });\n\n    }\n\n    blink() {\n        const closedHeight = 15;\n        const speed = 100;\n\n        this._doToBothEyes(eye => {\n            const startHeight = eye.parts.lid.height;\n            this._doToLidAndMask(eye, function (part) {\n                createjs.Tween.get(part)\n                    .to({height: closedHeight}, speed)\n                    .to({height: startHeight}, speed);\n            });\n        })\n    }\n\n\n    kawaii() {\n        this._doToBothEyes(eye => {\n            // const startHeight = eye.parts.lid.height;\n            this._doToLidAndMask(eye, function (part) {\n\n                part.height = 15;\n                part.curved = true;\n                console.log(part);\n            });\n        });\n    }\n\n    /**\n     * Change eye colors\n     * @param color1\n     * @param color2 (optional)\n     */\n    changeColors(color1, color2) {\n\n\n        this.eyes[0].parts.retina.fill = color1;\n        this.eyes[1].parts.retina.fill = color2 || color1;\n\n    }\n}\n\nwindow.Eyes = Eyes;\n"]}